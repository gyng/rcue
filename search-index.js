var searchIndex = JSON.parse('{\
"rcue":{"doc":"rcue is a simple CUE sheet reader.","t":[0,0,0,0,13,13,4,3,3,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,5,5],"n":["cue","errors","parser","util","Catalog","CdTextFile","Command","Cue","CueFile","File","Flags","Index","Isrc","None","Performer","Postgap","Pregap","Rem","Songwriter","Title","Track","Track","Unknown","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","catalog","cd_text_file","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comments","comments","comments","default","eq","eq","eq","file","files","flags","fmt","fmt","fmt","fmt","format","format","from","from","from","from","indices","into","into","into","into","isrc","ne","ne","ne","new","new","new","no","performer","performer","postgap","pregap","songwriter","songwriter","title","title","to_owned","to_owned","to_owned","to_owned","tracks","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unknown","unknown","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","CueError","Io","Parse","Result","borrow","borrow_mut","cause","fmt","fmt","from","from","from","from","into","to_string","try_from","try_into","type_id","0","0","parse","parse_from_file","next_string","next_token","next_values","timestamp_to_duration","unescape_quotes"],"q":["rcue","","","","rcue::cue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rcue::cue::Command","","","","","","","","","","","","","","","","","","rcue::errors","","","","","","","","","","","","","","","","","","rcue::errors::CueError","","rcue::parser","","rcue::util","","","",""],"d":["Structs and types","Errors module","Parser implementation","Utility functions","Media Catalog Number (MCN) of the disc","Path to the file containing the CD-Text meta-data of the …","Represents a CUE command in a CUE sheet.","Represents a CUE sheet.","Represents a FILE in a <code>Cue</code>.","(file name, file type) of a disc, to be used by tracks","Special sub-code flags for a track","Defines the index of a track on the disc","The International Standard Recording Code for a track, …","Not a command","Performer for a disc or a track","Length of a track’s postgap (mm:ss:ff) where each frame …","Length of a track’s pregap, (mm:ss:ff) where each frame …","ignore comment","Songwriter for a disc or a track","Title for a disc or a track","Represents a TRACK in a <code>CueFile</code>.","A track on a disc","Unknown command","","","","","","","","","Media Catalog Number (13 decimal digits)","Filename containing the CD-Text metadata of the disc","","","","","","","","","(key, value)","(key, value)","(key, value)","","","","","Path to file","Path to the data used for the following TRACK commands","Track special sub-code flags (DCP, 4CH, PRE, SCMS)","","","","","Track format (eg. AUDIO)","Format (WAVE, MP3, AIFF, BINARY - little endian, MOTOROLA …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","(index, timestamp)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","International Standard Recording Code, typically …","","","","Constructs a new <code>Track</code>.","Constructs a new CueFile.","Constructs a new Cue.","Track number","Performer for the track","Performer for the entire disc","Postgap of the track in <code>Duration</code>, converted from frames …","Pregap of the track in <code>Duration</code>, converted from frames (75 …","Songwriter for the track","Songwriter for the entire disc","Title for the track","Title for the entire disc","","","","","Tracks in this file","","","","","","","","","","","","","Raw lines from unhandled fields","Unparsed lines","","","","","","","","","","","","","","","","","","","Represents a parsing error.","IO error (file could not read)","CUE parse error","Re-exported <code>Result</code> for rcue errors","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Parses a <code>BufRead</code> into a <code>Cue</code> struct.","Parses a CUE file at <code>path</code> into a <code>Cue</code> struct.","Returns the next bare (single-word) or quoted (single- or …","Returns the next token from a <code>Chars</code>. This does <em>not</em> ignore …","Returns a list of values, split by whitespace.","Converts a CUE timestamp (MM:SS:FF) to a Duration where …","Unescapes a string in a CUE field."],"i":[0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,2,3,4,1,2,3,4,4,4,1,2,3,4,1,2,3,4,2,3,4,4,1,2,3,3,4,2,1,2,3,4,2,3,1,2,3,4,2,1,2,3,4,2,1,2,3,2,3,4,2,2,4,2,2,2,4,2,4,1,2,3,4,3,1,2,3,4,1,2,3,4,1,2,3,4,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,5,13,14,15,0,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,21,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["command",4]],[[["",0]],["track",3]],[[["",0]],["cuefile",3]],[[["",0]],["cue",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[],["cue",3]],[[["",0],["command",4]],["bool",0]],[[["",0],["track",3]],["bool",0]],[[["",0],["cuefile",3]],["bool",0]],null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[["",0],["command",4]],["bool",0]],[[["",0],["track",3]],["bool",0]],[[["",0],["cuefile",3]],["bool",0]],[[["str",0],["str",0]]],[[["str",0],["str",0]]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["error",8]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["parsefloaterror",3]]],[[["parseinterror",3]]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["bufread",8],["bool",0]],["result",4,[["cue",3],["cueerror",4]]]],[[["str",0],["bool",0]],["result",4,[["cue",3],["cueerror",4]]]],[[["chars",3],["str",0]],["result",4,[["string",3],["cueerror",4]]]],[[["chars",3]],["string",3]],[[["chars",3]],["vec",3,[["string",3]]]],[[["str",0]],["result",4,[["duration",3],["cueerror",4]]]],[[["str",0]],["string",3]]],"p":[[4,"Command"],[3,"Track"],[3,"CueFile"],[3,"Cue"],[13,"Rem"],[13,"Catalog"],[13,"CdTextFile"],[13,"Flags"],[13,"Isrc"],[13,"Songwriter"],[13,"Performer"],[13,"Title"],[13,"File"],[13,"Track"],[13,"Index"],[13,"Pregap"],[13,"Postgap"],[13,"Unknown"],[4,"CueError"],[13,"Parse"],[13,"Io"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};